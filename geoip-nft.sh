#!/bin/bash

#======================================================================
# geoip-nft.sh  GeoIP for nftables
# See https://github.com/wirefalls/geoip/wiki/Copyright for copyright
# information.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# A bash script to create nftables set definition files containing
# country-specific IPv4 and IPv6 address ranges for geoip filtering.
# https://github.com/wirefalls/geoip
# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
#
# This script requires write access to /etc and the install directory,
# (base_dir) which by default is: /etc/nftables/geoip.
#
# Supply the -s command line argument to silence verbose output.
#======================================================================

# Standard script variables.

# Semantic version number of this script.
geoip_ver=v1.0.4

# Filename of this script.
script_name="geoip-nft.sh"

# User configuration file.
geoip_conf="/etc/geoip-nft.conf"

# Error log filename. This file logs errors in addition to the systemd Journal.
errorlog="/etc/geoip-nft-error.log"

# GeoIP database filename.
dbip_filename="dbip-country-lite-$(date +%Y-%m).csv"

# Download URL.
dbip_url="https://download.db-ip.com/free/$dbip_filename.gz"

# Current date/time.
datetime="$(date +"%Y-%m-%d %H:%M:%S")"

# Default base directory where this script writes it's files.
base_dir="/etc/nftables/geoip"


# Allow script output to be suppressed when run as a service.
# Call the script with the -s argument to run silent.
if [ "$#" -eq 1 ] && [ "$1" = "-s" ]; then
	silent="yes"
else
	silent="no"
fi

# Set user settings to default values.
set_defaults() {
	# Enable ipv4 support ("yes" or "no").
	enable_ipv4="yes"

	# Enable ipv6 support ("yes" or "no").
	enable_ipv6="yes"

	# Enable restarting nftables after a database update ("yes" or "no").
	restart_nftables="no"

	# Enable sets to be flushed/refilled after updating the geoip database ("yes" or "no").
	enable_refill="no"

	# Filename (without path) of script to flush and refill sets.
	# This file will reside in the directory defined by base_dir.
	refill_file="refill-sets.nft"

	# Create the include-all.ipv4 and/or include-all.ipv6 files to allow loading
	# all geoip set files at once for older versions of nftables ("yes" or "no").
	# Works with all versions of nftables, but needed with nftables <= 0.9.3
	enable_include_all="yes"
}

# Print script messages to the screen when script is run manually.
# Output can be silenced with the -s argument when run as a service.
print_line() {
	if [ ! "$silent" = "yes" ] && [ "$#" -gt 0 ]; then
		for text in "$@"
		do
			if [ "$text" = "\n" ]; then
				printf '\n'
			elif [ "$text" = "\t" ]; then
				printf '\t'
			else
				printf '%s' "$text"
			fi
		done
	fi
}

# Print error messages to the screen and the error log file.
error_log() {
	if [ "$#" -gt 0 ]; then
		# If the error log has more than 50 lines then rotate it.
		if [ -s "$errorlog" ] && [ "$(awk 'END{print NR}' $errorlog)" -ge 50 ]; then
			print_line "\n" "Rotating error log $errorlog" "\n"
			mv -f $errorlog "$errorlog.old"
		fi
		# Write error messages to the error log file.
		printf '%s\n' "[$datetime]" >> $errorlog
		print_line "\n" "$script_name:" "\n"
		for err in "$@"
		do
			print_line "\t" "$err" "\n"
			printf '\t%s\n' "$err" >> $errorlog
		done
		print_line '\n'
		printf '\n' >> $errorlog
	else
		print_line "\n" "$script_name: The 'error_log' function needs at least one argument." "\n"
	fi
}

# Create the user configuration file /etc/geoip-nft.conf with default settings.
make_config() {
	print_line "\n" "Creating user configuration file: $geoip_conf" "\n"

	# Check present working directory for the existence of the geoip-nft.sh script.
	# If found, set the base_dir variable to the present working directory, and also
	# set the base_dir variable in /etc/geoip-nft.conf.
	if [ -s "$PWD/$script_name" ]; then
		base_dir=$PWD
	else
		error_log "Create user config: Unable to find $script_name in $PWD  Exiting..." \
					"Change directory (cd) to the base geoip directory and run this script again."
		exit 1
	fi

	printf '%s\n' "# GeoIP for nftables configuration file" > $geoip_conf
	printf '%s\n' "# https://github.com/wirefalls/geoip" >> $geoip_conf
	printf '%s\n' "# Generated by $script_name $geoip_ver" >> $geoip_conf
	printf '%s\n' "# $(date)" >> $geoip_conf
	printf '%s\n' "#==================================================" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Internet Protocols supported. At least one of the" >> $geoip_conf
	printf '%s\n' "# ipv4 or ipv6 settings must be set to yes." >> $geoip_conf
	printf '%s\n' "# Enable the creation of IPv4 country sets (yes/no)." >> $geoip_conf
	printf '%s\n' "enable_ipv4=$enable_ipv4" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Enable the creation of IPv6 country sets (yes/no)." >> $geoip_conf
	printf '%s\n' "enable_ipv6=$enable_ipv6" >> $geoip_conf
	printf '\n\n' >> $geoip_conf
	printf '%s\n' "# Define the base directory where the geoip-nft.sh" >> $geoip_conf
	printf '%s\n' "# script is located and writes it's files to." >> $geoip_conf
	printf '%s\n' "# Default: /etc/nftables/geoip" >> $geoip_conf
	printf '%s\n' "base_dir=$base_dir" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Enable restarting nftables after a database update." >> $geoip_conf
	printf '%s\n' "# Be aware that enabling this may break established" >> $geoip_conf
	printf '%s\n' "# connections between your system and other computers," >> $geoip_conf
	printf '%s\n' "# such as ssh sessions, connections to websites, etc." >> $geoip_conf
	printf '%s\n' "# Workstations typically set to yes; servers set to no." >> $geoip_conf
	printf '%s\n' "# If you set this to yes then set enable_refill to no." >> $geoip_conf
	printf '%s\n' "restart_nftables=$restart_nftables" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Enable GeoIP sets to be flushed and refilled after" >> $geoip_conf
	printf '%s\n' "# the periodic database update (yes/no). Only enable" >> $geoip_conf
	printf '%s\n' "# this after manually testing the refill script defined" >> $geoip_conf
	printf '%s\n' "# in the next setting below." >> $geoip_conf
	printf '%s\n' "# If you set this to yes then set restart_nftables to no." >> $geoip_conf
	printf '%s\n' "enable_refill=$enable_refill" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Define the filename (without path) of the nftables" >> $geoip_conf
	printf '%s\n' "# script to flush and refill the GeoIP sets. The file" >> $geoip_conf
	printf '%s\n' "# should be located in the 'base_dir' defined above." >> $geoip_conf
	printf '%s\n' "refill_file=$refill_file" >> $geoip_conf
	printf '\n' >> $geoip_conf
	printf '%s\n' "# Enable creation of include-all files to include" >> $geoip_conf
	printf '%s\n' "# all country sets on older versions of nftables" >> $geoip_conf
	printf '%s\n' "# that don't support include wildcards (yes/no)." >> $geoip_conf
	printf '%s\n' "enable_include_all=$enable_include_all" >> $geoip_conf
}

# Read user settings from the /etc/geoip-nft.conf file. If the
# file doesn't exist then create it and use default settings.
check_config() {

	if [ -s "$geoip_conf" ]; then
		# The /etc/geoip-nft.conf file exist and has a file size greater than zero, so import the settings.

		# Import the value for enable_ipv4. Remove single/double quotes, tabs and blank spaces, and convert to lowercase.
		local value=$(grep -Po 'enable_ipv4=\K.*' $geoip_conf | sed "s/['\"\t ]//g" | awk '{print tolower($0)}')
		if [ "$value" = "yes" ] || [ "$value" = "no" ]; then
			enable_ipv4="$value"
		else
			error_log "The 'enable_ipv4' variable not set to yes or no in $geoip_conf" \
						"Using the default value: $enable_ipv4"
		fi

		# Import the value for enable_ipv6. Remove single/double quotes, tabs and blank spaces, and convert to lowercase.
		value=$(grep -Po 'enable_ipv6=\K.*' $geoip_conf | sed "s/['\"\t ]//g" | awk '{print tolower($0)}')
		if [ "$value" = "yes" ] || [ "$value" = "no" ]; then
			enable_ipv6="$value"
		else
			error_log "The 'enable_ipv6' variable not set to yes or no in $geoip_conf" \
						"Using the default value: $enable_ipv6"
		fi

		# Import the value for base_dir. Remove double quotes and tabs, trailing slashes, leading and
		# trailing single quotes and blank spaces, and don't change case of pathname.
		value=$(grep -Po 'base_dir=\K.*' $geoip_conf | sed "s/[\"\t]//g; s:/*$::; s/^[' ]*//; s/[' ]*$//")
		if [ -n "$value" ] && [ -d "$value" ]; then
			if [ -s "$value/$script_name" ]; then
				base_dir="$value"
			else
				error_log "The base directory defined in $geoip_conf doesn't contain '$script_name', exiting..."
				exit 1
			fi
		else
			error_log "The base directory defined in $geoip_conf doesn't exist." "$value directory not found, exiting..."
			exit 1
		fi

		# Import the value for restart_nftables. Remove single/double quotes, tabs and blank spaces, and convert to lowercase.
		value=$(grep -Po 'restart_nftables=\K.*' $geoip_conf | sed "s/['\"\t ]//g" | awk '{print tolower($0)}')
		if [ "$value" = "yes" ] || [ "$value" = "no" ]; then
			restart_nftables="$value"
		else
			error_log "The 'restart_nftables' variable not set to yes or no in $geoip_conf" \
						"Using the default value: $restart_nftables"
		fi

		# Import the value for enable_refill. Remove single/double quotes, tabs and blank spaces, and convert to lowercase.
		value=$(grep -Po 'enable_refill=\K.*' $geoip_conf | sed "s/['\"\t ]//g" | awk '{print tolower($0)}')
		if [ "$value" = "yes" ] || [ "$value" = "no" ]; then
			enable_refill="$value"
		else
			error_log "The 'enable_refill' variable not set to yes or no in $geoip_conf" \
						"Using the default value: $enable_refill"
		fi

		# Import the value for refill_file. Remove single/double quotes, tabs, leading and trailing blanks and
		# don't change case of filename.
		value=$(grep -Po 'refill_file=\K.*' $geoip_conf | sed "s/[\"\t/]//g; s/^[' ]*//; s/[' ]*$//")
		if [ -n "$value" ]; then
			refill_file="$value"
		fi

		# Import the value for enable_include_all. Remove single/double quotes, tabs and blank spaces, and convert to lowercase.
		value=$(grep -Po 'enable_include_all=\K.*' $geoip_conf | sed "s/['\"\t ]//g" | awk '{print tolower($0)}')
		if [ "$value" = "yes" ] || [ "$value" = "no" ]; then
			enable_include_all="$value"
		else
			error_log "The 'enable_include_all' variable not set to yes or no in $geoip_conf" \
						"Using the default value: $enable_include_all"
		fi
	else
		# The geoip-nft.conf file is empty or doesn't exist, so create it.
		make_config
	fi

	# Set relative path variables.

	# Directory where the country set files are stored.
	cc_dir="$base_dir/countrysets"

	# Current database compressed archive pathname.
	dbip_gz="$base_dir/$dbip_filename.gz"

	# Current database pathname.
	dbip_csv="$base_dir/$dbip_filename"

	# Include files to load all geoip sets at once. Required for older
	# versions of nftables that don't properly support include wildcards.
	include_file4="$base_dir/include-all.ipv4"
	include_file6="$base_dir/include-all.ipv6"
}

# Verify that a directory exists and is writable, and exit if not. Pass the pathname of a
# directory as an argument. Pass a second argument '-c' if the missing directory should be created.
check_dir() {
	if [ -d "$1" ]; then
		if [ ! -w "$1" ]; then
			error_log "The $1 directory isn't writable. Exiting..."
			exit 1
		fi
	else
		if [ -n "$1" ]; then
			if [ "$2" = "-c" ]; then
				print_line "\n" "The $1 directory doesn't exist, creating..." "\n"
				mkdir -p "$1"
			fi
			if [ -d "$1" ]; then
				if [ ! -w "$1" ]; then
					error_log "The $1 directory isn't writable. Exiting..."
					exit 1
				fi
			else
				error_log "The $1 directory doesn't exist. Exiting..."
				exit 1
			fi
		else
			error_log "check_dir: The directory string isn't valid. Exiting..."
			exit 1
		fi
	fi
}

# Verify that required programs are available.
check_programs() {
	local reqd_programs="awk curl grep gunzip nft sed sort"

	for p in $reqd_programs
	do
		command -v "$p" > /dev/null 2>&1
		if [ ! $? -eq 0 ]; then
			error_log "This script requires the '$p' program, not found in \$PATH. Exiting..."
			exit 1
		fi
	done
}

# Verify at least one of the variables $enable_ipv4 or $enable_ipv6 is set to 'yes'.
# Change both settings to 'yes' if neither setting is set to yes (default).
check_protocol() {
	if [ ! "$enable_ipv4" = "yes" ] && [ ! "$enable_ipv6" = "yes" ]; then
		print_line "\n" "Neither variable 'enable_ipv4' or 'enable_ipv6' is set to 'yes' in /etc/geoip-nft.conf." "\n" \
					"Check your settings and set at least one of those two variables to 'yes'." "\n" \
					"Both settings will default to 'yes' for this run." "\n"
		enable_ipv4="yes"
		enable_ipv6="yes"
	fi
}

# Check if semantic version number of installed program is at least required minimum version.
# Supply 'curr_version' and 'reqd_version' as arguments.
version_atleast() {
	local curr_version=$(printf '%s' "$1" | awk -F. '{printf("%03d%03d%03d\n", $1,$2,$3)}')
	local reqd_version=$(printf '%s' "$2" | awk -F. '{printf("%03d%03d%03d\n", $1,$2,$3)}')
	[ "$curr_version" -ge "$reqd_version" ]
}

# Print a notice on how to include all GeoIP sets based on the installed nftables version
# reported by the nft program.
print_notice() {
	version_atleast $(nft -v | awk '{gsub(/[^0-9.]/, "", $2); print $2}') "0.9.4" && \
		print_line "\n" "Your nftables version is at least version 0.9.4, so you can include" "\n" \
					"all geoip sets in your nftables.conf or $refill_file file with:" "\n" \
					"include \"$cc_dir/*\"" "\n" || \
		print_line "\n" "Your nftables version is less than version 0.9.4, so you can include" "\n" \
					"all geoip sets in your nftables.conf or $refill_file file with:" "\n" \
					"include \"$include_file4\"" "\n" \
					"include \"$include_file6\"" "\n"
}

# Flush and refill GeoIP sets after the monthly database update.
flush_refill_sets() {
	# Run the refill script defined by $refill_file above. The 'enable_refill' variable must
	# be set to "yes" for this to work. 
	if [ "$enable_refill" = "yes" ]; then
		if [ -n "$base_dir/$refill_file" ] && [ -s "$base_dir/$refill_file" ]; then
			print_line "\n" "Refilling updated country-specific sets by running the script:" "\n"
			print_line "$base_dir/$refill_file" "\n"
			nft -f "$base_dir/$refill_file"
			if [ $? -eq 0 ]; then
				print_line "Refill successful." "\n"
			else
				error_log "Refilling sets failed." "See 'systemctl status nftables' and 'journalctl -xe' for details."
				exit 1
			fi
		else
			print_line "\n" "Unable to refill GeoIP sets, refill script $base_dir/$refill_file not found." "\n"
			print_line "Ensure file exists or set 'enable_refill=no' in $geoip_conf." "\n"
		fi
	fi
}

# Download the free GeoIP database from db-ip.com
# IP Geolocation by DB-IP  https://db-ip.com  Licensed under
# (CC BY-SA 4.0) https://creativecommons.org/licenses/by-sa/4.0/legalcode
download_db() {
	cd "$base_dir" || exit

	if [ ! -s "$dbip_csv" ]; then
		print_line "\n" "Downloading the free geoip database from https://db-ip.com." "\n"
		print_line "IP Geolocation by DB-IP  https://db-ip.com  Licensed under" "\n"
		print_line "(CC BY-SA 4.0) https://creativecommons.org/licenses/by-sa/4.0/legalcode" "\n" "\n"
		if [ "$silent" = "yes" ]; then
			curl -f -L -O -s -S "$dbip_url"
			if [ $? -ne 0 ]; then
				error_log "Failed to download $dbip_url. Exiting..."
				exit 1
			fi
		else
			curl -f -L -O "$dbip_url"
			if [ $? -ne 0 ]; then
				error_log "Failed to download $dbip_url. Exiting..."
				exit 1
			fi
		fi
		if [ -s "$dbip_gz" ]; then
			# The download was successful.
			rm -f dbip-country-lite-*.csv
			gunzip -f "$dbip_gz"
			if [ $? -ne 0 ] || [ ! -s "$dbip_csv" ]; then
				# The gunzip failed so error out.
				error_log "Failed to unzip $dbip_gz. Exiting..."
				exit 1
			fi
		else
			error_log "Failed to download $dbip_url. Exiting..."
			exit 1
		fi
	else
		print_line "\n" "The latest database csv file already exists locally; using existing file:" "\n" "$dbip_csv" "\n"
	fi
}

# Create the include-all files.
# The include-all files allow all IPv4 or IPv6 country code sets to be available to your ruleset.
# Required for older versions of nftables that don't properly support include wildcards.
# Pass the $include_file4 or $include_file6 variable as an argument to this function.
make_include_header() {
	printf '%s\n' "# Generated by $script_name $geoip_ver" > "$1"
	printf '%s\n' "# $(date)" >> "$1"
	printf '%s\n' "# Make all IPv$(printf '%s' "${1: -1}") country code sets available to your ruleset." >> "$1"
	printf '%s\n' "# Only needed with versions of nftables <= 0.9.3" >> "$1"
	printf '%s\n' "# which don't properly support include wildcards." >> "$1"
	printf '%s\n' "# Load this file with (omit the leading '#' mark):" >> "$1"
	printf '%s\n' "#" >> "$1"
	printf '%s\t%s\n\n\n' "#" "include \"$1\"" >> "$1"
}

# Make the nftables GeoIP sets.
make_sets_db() {
	if [ -s "$dbip_csv" ]; then
		# The GeoIP database file exists and has a size greater than zero, so begin the set generation.
		print_line "\n" "Creating country-specific nftables sets..." "\n"

		# Create an array to store a list of all valid country codes found in the database csv file.
		# Filter out only the 'ZZ' country code used for 'no location and owner' since it isn't valid.
		# https://db-ip.com/faq.php
		print_line "\n" "Creating a list of all country codes found in the database csv file." "\n" "\n"
		local cc_list_array=($(awk -F"," '{ print $3 }' "$dbip_csv" | sort -u | sed -e '/ZZ/d'))

		# Verify that the $cc_list_array list exists and has at least 200 elements.
		if [ ! "$cc_list_array" ] || [ ${#cc_list_array[@]} -lt 200 ]; then
			error_log "The country code list 'cc_list_array' is missing or incomplete. Exiting..."
			exit 1
		fi

		# Create country-specific nftables sets.
		print_line "Generating nftables GeoIP sets in:" "\n"
		print_line "$cc_dir" "\n" "\n"
		print_line "This may take a moment, please wait..." "\n" "\n"
		print_line "Some countries may only have IPv4 addresses or IPv6 addresses." "\n" "\n"

		# Clear the 'countrysets' directory.
		rm -f "$cc_dir"/*

		# Generate an IPv4 set for each country if $enable_ipv4 is set to 'yes' above.
		if [ "$enable_ipv4" = "yes" ]; then

			# Create an IPv4 include file to allow loading all country code sets at once.
			if [ "$enable_include_all" = "yes" ]; then
				make_include_header "$include_file4"
			fi

			for line in "${cc_list_array[@]}"
			do
				# Count the number of elements in the new set file.
				# If the starting and ending IP address are equal, list them as a single address for nftables compatibility.
				local element_count4=$(grep "$line" "$dbip_csv" | grep -v : | \
					awk -F"," '{ if ($1==$2) print "\t" $1 ","; else print "\t" $1 "," $2 "," fi }' | grep -o "," | awk 'END{print NR}')

				# Verify that the set being generated has at least one element, otherwise skip it.
				if [ "$element_count4" -eq 0 ]; then
					rm -f "$cc_dir/$line.ipv4"
					print_line "No IPv4 addresses in database for country code $line, skipping..." "\n"
					continue
				else
					if [ "$enable_include_all" = "yes" ]; then
						# The set has elements so add the country code line to the include-all file.
						printf '%s;\n' "include \"$cc_dir/$line.ipv4\"" >> "$include_file4"
					fi
				fi

				# Add the file header text and db-ip.com license information.
				printf '%s\n' "# Generated by $script_name $geoip_ver" > "$cc_dir/$line.ipv4"
				printf '%s\n' "# $(date)" >> "$cc_dir/$line.ipv4"
				printf '%s\n' "# IP Geolocation by DB-IP  https://db-ip.com  Licensed under" >> "$cc_dir/$line.ipv4"
				printf '%s\n' "# (CC BY-SA 4.0) https://creativecommons.org/licenses/by-sa/4.0/legalcode" >> "$cc_dir/$line.ipv4"

				# Add the element count and country code used to create this set.
				printf '%s\n' "# Country code used to create this set: $line" >> "$cc_dir/$line.ipv4"
				printf '%s\n\n' "# Number of elements in this set: $element_count4" >> "$cc_dir/$line.ipv4"

				# Add the 'define' set line.
				printf '%s\n' "define $line.ipv4 = {" >> "$cc_dir/$line.ipv4"

				# Grep the GeoIP database file for country code matches for the current $line.
				# If the starting and ending IP address are equal, list them as a single address for nftables compatibility.
				# sed removes the comma on the last line of the element list.
				grep "$line" "$dbip_csv" | grep -v : | \
					awk -F"," '{ if ($1==$2) print "\t" $1 ","; else print "\t" $1 "-" $2 "," fi }' | \
						sed '$s/,$//' >> "$cc_dir/$line.ipv4"

				# Add the closing brace to the output file.
				printf '%s' "}" >> "$cc_dir/$line.ipv4"
			done
		else
			rm -f "$cc_dir/*.ipv4"
		fi

		# Generate an IPv6 set for each country if $enable_ipv6 is set to 'yes' above.
		if [ "$enable_ipv6" = "yes" ]; then

			# Create an IPv6 include file to allow loading all country code sets at once.
			if [ "$enable_include_all" = "yes" ]; then
				make_include_header "$include_file6"
			fi

			for line in "${cc_list_array[@]}"
			do
				# Count the number of elements in the new set file.
				# If the starting and ending IP address are equal, list them as a single address for nftables compatibility.
				local element_count6=$(grep "$line" "$dbip_csv" | grep : | \
					awk -F"," '{ if ($1==$2) print "\t" $1 ","; else print "\t" $1 "," $2 "," fi }' | grep -o "," | awk 'END{print NR}')

				# Verify that the set being generated has at least one element, otherwise skip it.
				if [ "$element_count6" -eq 0 ]; then
					rm -f "$cc_dir/$line.ipv6"
					printf '%s\n' "No IPv6 addresses in database for country code $line, skipping..."
					continue
				else
					if [ "$enable_include_all" = "yes" ]; then
						# The set has elements so add the country code line to the include-all file.
						printf '%s;\n' "include \"$cc_dir/$line.ipv6\"" >> "$include_file6"
					fi
				fi

				# Add the file header text and db-ip.com license information.
				printf '%s\n' "# Generated by $script_name $geoip_ver" > "$cc_dir/$line.ipv6"
				printf '%s\n' "# $(date)" >> "$cc_dir/$line.ipv6"
				printf '%s\n' "# IP Geolocation by DB-IP  https://db-ip.com  Licensed under" >> "$cc_dir/$line.ipv6"
				printf '%s\n' "# (CC BY-SA 4.0) https://creativecommons.org/licenses/by-sa/4.0/legalcode" >> "$cc_dir/$line.ipv6"

				# Add the element count and country code used to create this set.
				printf '%s\n' "# Country code used to create this set: $line" >> "$cc_dir/$line.ipv6"
				printf '%s\n\n' "# Number of elements in this set: $element_count6" >> "$cc_dir/$line.ipv6"
				printf '%s\n' "define $line.ipv6 = {" >> "$cc_dir/$line.ipv6"

				# Grep the GeoIP database file for country code matches for the current $line.
				# If the starting and ending IP address are equal, list them as a single address for nftables compatibility.
				grep "$line" "$dbip_csv" | grep : | \
					awk -F"," '{ if ($1==$2) print "\t" $1 ","; else print "\t" $1 "-" $2 "," fi }' | \
						sed '$s/,$//' >> "$cc_dir/$line.ipv6"

				# Add the closing brace to the output file.
				printf '%s' "}" >> "$cc_dir/$line.ipv6"
			done
		else
			rm -f "$cc_dir/*.ipv6"
		fi
		print_line "\n" "Country set creation complete..." "\n"
	else
		error_log "The database file $dbip_csv is missing. Exiting..."
		exit 1
	fi
}


# Main Function
main() {
	# Start a timer for the script run time.
	local starttime=$(date +%s)

	# Verify that the /etc directory is writable.
	check_dir "/etc"

	# Verify that required programs are available.
	check_programs

	# Print the current date/time.
	print_line "\n" "$(date)" "\n"

	# Print the GeoIP for nftables version number.
	print_line "\n" "GeoIP for nftables $geoip_ver" "\n"

	# Print the bash version string.
	print_line "\n" "bash version $BASH_VERSION" "\n"

	# Print the nftables version string from the nft program.
	print_line "\n" "$(nft -v)" "\n"

	# Set user default settings.
	set_defaults

	#Read user settings from the /etc/geoip-nft.conf file, otherwise use defaults.
	check_config

	# Verify at least one of the variables 'enable_ipv4' or 'enable_ipv6' is set to 'yes'.
	check_protocol

	# Verify that the base directory exists and is writable.
	check_dir "$base_dir"

	# Verify that the countrysets directory exists and is writable. Create the directory
	# if it doesn't exist.
	check_dir "$cc_dir" -c

	# Checks are complete so download the GeoIP database.
	download_db

	# Generate the country-specific nftables sets.
	make_sets_db

	# Flush and refill updated GeoIP sets by running the refill script defined by '$refill_file'
	# above. The '$enable_refill' variable must be set to "yes" for this to work, and the
	# restart_nftables setting will be set to no as the two settings are mutually exclusive.
	if [ "$enable_refill" = "yes" ]; then
		restart_nftables="no"
		flush_refill_sets
	fi

	# Enable restarting nftables after a database update. The '$restart_nftables' variable must
	# be set to "yes" for this to work, and the enable_refill setting must be set to no as the
	# two settings are mutually exclusive.
	if [ "$restart_nftables" = "yes" ]; then
		print_line "\n" "Restarting nftables..." "\n"
		systemctl restart nftables  > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			print_line "Restart successful" "\n"
		else
			error_log "Restarting nftables failed." "Check 'systemctl status nftables'." \
						"Also check 'journalctl -xe' for additional details."
			exit 1
		fi
	fi

	# Print a notice on how to include all GeoIP sets based on the installed nftables version.
	print_notice

	# Display the script run time.
	print_line "\n" "Script run time: $(($(date +%s) - $starttime))s" "\n" "\n"

	# Print status even if running silent so there's an entry in the system log.
	if [ "$silent" = "yes" ]; then
		printf '%s\n' "$script_name: Finished successfully."
	else
		print_line "Finished!" "\n" "\n"
	fi
}

main "$@"

exit 0
